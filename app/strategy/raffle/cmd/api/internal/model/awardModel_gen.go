// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/hsn0918/BigMarket/sh/mysql/genModel/award"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	awardFieldNames          = builder.RawFieldNames(&Award{})
	awardRows                = strings.Join(awardFieldNames, ",")
	awardRowsExpectAutoSet   = strings.Join(stringx.Remove(awardFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	awardRowsWithPlaceHolder = strings.Join(stringx.Remove(awardFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBigMarketAwardIdPrefix = "cache:bigMarket:award:id:"
)

type (
	awardModel interface {
		Insert(ctx context.Context, data *Award) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Award, error)
		Update(ctx context.Context, data *Award) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAwardModel struct {
		sqlc.CachedConn
		table string
	}

	Award struct {
		Id          int64     `db:"id"`           // 自增ID
		AwardId     int64     `db:"award_id"`     // 抽奖奖品ID - 内部流转使用
		AwardKey    string    `db:"award_key"`    // 奖品对接标识 - 每一个都是一个对应的发奖策略
		AwardConfig string    `db:"award_config"` // 奖品配置信息
		AwardDesc   string    `db:"award_desc"`   // 奖品内容描述
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		UpdateTime  time.Time `db:"update_time"`  // 更新时间
	}
)

func newAwardModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAwardModel {
	return &defaultAwardModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`award`",
	}
}

func (m *defaultAwardModel) Delete(ctx context.Context, id int64) error {
	bigMarketAwardIdKey := fmt.Sprintf("%s%v", cacheBigMarketAwardIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, bigMarketAwardIdKey)
	return err
}

func (m *defaultAwardModel) FindOne(ctx context.Context, id int64) (*Award, error) {
	bigMarketAwardIdKey := fmt.Sprintf("%s%v", cacheBigMarketAwardIdPrefix, id)
	var resp Award
	err := m.QueryRowCtx(ctx, &resp, bigMarketAwardIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", awardRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, award.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAwardModel) Insert(ctx context.Context, data *Award) (sql.Result, error) {
	bigMarketAwardIdKey := fmt.Sprintf("%s%v", cacheBigMarketAwardIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, awardRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AwardId, data.AwardKey, data.AwardConfig, data.AwardDesc)
	}, bigMarketAwardIdKey)
	return ret, err
}

func (m *defaultAwardModel) Update(ctx context.Context, data *Award) error {
	bigMarketAwardIdKey := fmt.Sprintf("%s%v", cacheBigMarketAwardIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, awardRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AwardId, data.AwardKey, data.AwardConfig, data.AwardDesc, data.Id)
	}, bigMarketAwardIdKey)
	return err
}

func (m *defaultAwardModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBigMarketAwardIdPrefix, primary)
}

func (m *defaultAwardModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", awardRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAwardModel) tableName() string {
	return m.table
}
