// Code generated by goctl. DO NOT EDIT.

package strategy

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	strategyFieldNames          = builder.RawFieldNames(&Strategy{})
	strategyRows                = strings.Join(strategyFieldNames, ",")
	strategyRowsExpectAutoSet   = strings.Join(stringx.Remove(strategyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	strategyRowsWithPlaceHolder = strings.Join(stringx.Remove(strategyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBigMarketStrategyIdPrefix = "cache:bigMarket:strategy:id:"
)

type (
	strategyModel interface {
		Insert(ctx context.Context, data *Strategy) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Strategy, error)
		Update(ctx context.Context, data *Strategy) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStrategyModel struct {
		sqlc.CachedConn
		table string
	}

	Strategy struct {
		Id           int64          `db:"id"`            // 自增ID
		StrategyId   int64          `db:"strategy_id"`   // 抽奖策略ID
		StrategyDesc string         `db:"strategy_desc"` // 抽奖策略描述
		RuleModels   sql.NullString `db:"rule_models"`   // 规则模型，rule配置的模型同步到此表，便于使用
		CreateTime   time.Time      `db:"create_time"`   // 创建时间
		UpdateTime   time.Time      `db:"update_time"`   // 更新时间
	}
)

func newStrategyModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultStrategyModel {
	return &defaultStrategyModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`strategy`",
	}
}

func (m *defaultStrategyModel) Delete(ctx context.Context, id int64) error {
	bigMarketStrategyIdKey := fmt.Sprintf("%s%v", cacheBigMarketStrategyIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, bigMarketStrategyIdKey)
	return err
}

func (m *defaultStrategyModel) FindOne(ctx context.Context, id int64) (*Strategy, error) {
	bigMarketStrategyIdKey := fmt.Sprintf("%s%v", cacheBigMarketStrategyIdPrefix, id)
	var resp Strategy
	err := m.QueryRowCtx(ctx, &resp, bigMarketStrategyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", strategyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStrategyModel) Insert(ctx context.Context, data *Strategy) (sql.Result, error) {
	bigMarketStrategyIdKey := fmt.Sprintf("%s%v", cacheBigMarketStrategyIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, strategyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.StrategyId, data.StrategyDesc, data.RuleModels)
	}, bigMarketStrategyIdKey)
	return ret, err
}

func (m *defaultStrategyModel) Update(ctx context.Context, data *Strategy) error {
	bigMarketStrategyIdKey := fmt.Sprintf("%s%v", cacheBigMarketStrategyIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, strategyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.StrategyId, data.StrategyDesc, data.RuleModels, data.Id)
	}, bigMarketStrategyIdKey)
	return err
}

func (m *defaultStrategyModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBigMarketStrategyIdPrefix, primary)
}

func (m *defaultStrategyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", strategyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStrategyModel) tableName() string {
	return m.table
}
