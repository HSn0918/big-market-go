// Code generated by goctl. DO NOT EDIT.

package raffle_activity_sku

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	raffleActivitySkuFieldNames          = builder.RawFieldNames(&RaffleActivitySku{})
	raffleActivitySkuRows                = strings.Join(raffleActivitySkuFieldNames, ",")
	raffleActivitySkuRowsExpectAutoSet   = strings.Join(stringx.Remove(raffleActivitySkuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	raffleActivitySkuRowsWithPlaceHolder = strings.Join(stringx.Remove(raffleActivitySkuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBigMarketRaffleActivitySkuIdPrefix  = "cache:bigMarket:raffleActivitySku:id:"
	cacheBigMarketRaffleActivitySkuSkuPrefix = "cache:bigMarket:raffleActivitySku:sku:"
)

type (
	raffleActivitySkuModel interface {
		Insert(ctx context.Context, data *RaffleActivitySku) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RaffleActivitySku, error)
		FindOneBySku(ctx context.Context, sku int64) (*RaffleActivitySku, error)
		Update(ctx context.Context, data *RaffleActivitySku) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRaffleActivitySkuModel struct {
		sqlc.CachedConn
		table string
	}

	RaffleActivitySku struct {
		Id                int64     `db:"id"`                  // 自增ID
		Sku               int64     `db:"sku"`                 // 商品sku - 把每一个组合当做一个商品
		ActivityId        int64     `db:"activity_id"`         // 活动ID
		ActivityCountId   int64     `db:"activity_count_id"`   // 活动个人参与次数ID
		StockCount        int64     `db:"stock_count"`         // 商品库存
		StockCountSurplus int64     `db:"stock_count_surplus"` // 剩余库存
		CreateTime        time.Time `db:"create_time"`         // 创建时间
		UpdateTime        time.Time `db:"update_time"`         // 更新时间
	}
)

func newRaffleActivitySkuModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRaffleActivitySkuModel {
	return &defaultRaffleActivitySkuModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`raffle_activity_sku`",
	}
}

func (m *defaultRaffleActivitySkuModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	bigMarketRaffleActivitySkuIdKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivitySkuIdPrefix, id)
	bigMarketRaffleActivitySkuSkuKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivitySkuSkuPrefix, data.Sku)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, bigMarketRaffleActivitySkuIdKey, bigMarketRaffleActivitySkuSkuKey)
	return err
}

func (m *defaultRaffleActivitySkuModel) FindOne(ctx context.Context, id int64) (*RaffleActivitySku, error) {
	bigMarketRaffleActivitySkuIdKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivitySkuIdPrefix, id)
	var resp RaffleActivitySku
	err := m.QueryRowCtx(ctx, &resp, bigMarketRaffleActivitySkuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", raffleActivitySkuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRaffleActivitySkuModel) FindOneBySku(ctx context.Context, sku int64) (*RaffleActivitySku, error) {
	bigMarketRaffleActivitySkuSkuKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivitySkuSkuPrefix, sku)
	var resp RaffleActivitySku
	err := m.QueryRowIndexCtx(ctx, &resp, bigMarketRaffleActivitySkuSkuKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `sku` = ? limit 1", raffleActivitySkuRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, sku); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRaffleActivitySkuModel) Insert(ctx context.Context, data *RaffleActivitySku) (sql.Result, error) {
	bigMarketRaffleActivitySkuIdKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivitySkuIdPrefix, data.Id)
	bigMarketRaffleActivitySkuSkuKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivitySkuSkuPrefix, data.Sku)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, raffleActivitySkuRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Sku, data.ActivityId, data.ActivityCountId, data.StockCount, data.StockCountSurplus)
	}, bigMarketRaffleActivitySkuIdKey, bigMarketRaffleActivitySkuSkuKey)
	return ret, err
}

func (m *defaultRaffleActivitySkuModel) Update(ctx context.Context, newData *RaffleActivitySku) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	bigMarketRaffleActivitySkuIdKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivitySkuIdPrefix, data.Id)
	bigMarketRaffleActivitySkuSkuKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivitySkuSkuPrefix, data.Sku)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, raffleActivitySkuRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Sku, newData.ActivityId, newData.ActivityCountId, newData.StockCount, newData.StockCountSurplus, newData.Id)
	}, bigMarketRaffleActivitySkuIdKey, bigMarketRaffleActivitySkuSkuKey)
	return err
}

func (m *defaultRaffleActivitySkuModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBigMarketRaffleActivitySkuIdPrefix, primary)
}

func (m *defaultRaffleActivitySkuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", raffleActivitySkuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRaffleActivitySkuModel) tableName() string {
	return m.table
}
