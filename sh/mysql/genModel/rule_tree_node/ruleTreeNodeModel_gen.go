// Code generated by goctl. DO NOT EDIT.

package rule_tree_node

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ruleTreeNodeFieldNames          = builder.RawFieldNames(&RuleTreeNode{})
	ruleTreeNodeRows                = strings.Join(ruleTreeNodeFieldNames, ",")
	ruleTreeNodeRowsExpectAutoSet   = strings.Join(stringx.Remove(ruleTreeNodeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ruleTreeNodeRowsWithPlaceHolder = strings.Join(stringx.Remove(ruleTreeNodeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBigMarketRuleTreeNodeIdPrefix = "cache:bigMarket:ruleTreeNode:id:"
)

type (
	ruleTreeNodeModel interface {
		Insert(ctx context.Context, data *RuleTreeNode) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RuleTreeNode, error)
		Update(ctx context.Context, data *RuleTreeNode) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRuleTreeNodeModel struct {
		sqlc.CachedConn
		table string
	}

	RuleTreeNode struct {
		Id         int64          `db:"id"`          // 自增ID
		TreeId     string         `db:"tree_id"`     // 规则树ID
		RuleKey    string         `db:"rule_key"`    // 规则Key
		RuleDesc   string         `db:"rule_desc"`   // 规则描述
		RuleValue  sql.NullString `db:"rule_value"`  // 规则比值
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 更新时间
	}
)

func newRuleTreeNodeModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRuleTreeNodeModel {
	return &defaultRuleTreeNodeModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`rule_tree_node`",
	}
}

func (m *defaultRuleTreeNodeModel) Delete(ctx context.Context, id int64) error {
	bigMarketRuleTreeNodeIdKey := fmt.Sprintf("%s%v", cacheBigMarketRuleTreeNodeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, bigMarketRuleTreeNodeIdKey)
	return err
}

func (m *defaultRuleTreeNodeModel) FindOne(ctx context.Context, id int64) (*RuleTreeNode, error) {
	bigMarketRuleTreeNodeIdKey := fmt.Sprintf("%s%v", cacheBigMarketRuleTreeNodeIdPrefix, id)
	var resp RuleTreeNode
	err := m.QueryRowCtx(ctx, &resp, bigMarketRuleTreeNodeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ruleTreeNodeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuleTreeNodeModel) Insert(ctx context.Context, data *RuleTreeNode) (sql.Result, error) {
	bigMarketRuleTreeNodeIdKey := fmt.Sprintf("%s%v", cacheBigMarketRuleTreeNodeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, ruleTreeNodeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TreeId, data.RuleKey, data.RuleDesc, data.RuleValue)
	}, bigMarketRuleTreeNodeIdKey)
	return ret, err
}

func (m *defaultRuleTreeNodeModel) Update(ctx context.Context, data *RuleTreeNode) error {
	bigMarketRuleTreeNodeIdKey := fmt.Sprintf("%s%v", cacheBigMarketRuleTreeNodeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ruleTreeNodeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TreeId, data.RuleKey, data.RuleDesc, data.RuleValue, data.Id)
	}, bigMarketRuleTreeNodeIdKey)
	return err
}

func (m *defaultRuleTreeNodeModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBigMarketRuleTreeNodeIdPrefix, primary)
}

func (m *defaultRuleTreeNodeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ruleTreeNodeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRuleTreeNodeModel) tableName() string {
	return m.table
}
