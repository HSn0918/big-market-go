// Code generated by goctl. DO NOT EDIT.

package raffle_activity

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	raffleActivityFieldNames          = builder.RawFieldNames(&RaffleActivity{})
	raffleActivityRows                = strings.Join(raffleActivityFieldNames, ",")
	raffleActivityRowsExpectAutoSet   = strings.Join(stringx.Remove(raffleActivityFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	raffleActivityRowsWithPlaceHolder = strings.Join(stringx.Remove(raffleActivityFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBigMarketRaffleActivityIdPrefix         = "cache:bigMarket:raffleActivity:id:"
	cacheBigMarketRaffleActivityActivityIdPrefix = "cache:bigMarket:raffleActivity:activityId:"
)

type (
	raffleActivityModel interface {
		Insert(ctx context.Context, data *RaffleActivity) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RaffleActivity, error)
		FindOneByActivityId(ctx context.Context, activityId int64) (*RaffleActivity, error)
		Update(ctx context.Context, data *RaffleActivity) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRaffleActivityModel struct {
		sqlc.CachedConn
		table string
	}

	RaffleActivity struct {
		Id            int64     `db:"id"`              // 自增ID
		ActivityId    int64     `db:"activity_id"`     // 活动ID
		ActivityName  string    `db:"activity_name"`   // 活动名称
		ActivityDesc  string    `db:"activity_desc"`   // 活动描述
		BeginDateTime time.Time `db:"begin_date_time"` // 开始时间
		EndDateTime   time.Time `db:"end_date_time"`   // 结束时间
		StrategyId    int64     `db:"strategy_id"`     // 抽奖策略ID
		State         string    `db:"state"`           // 活动状态
		CreateTime    time.Time `db:"create_time"`     // 创建时间
		UpdateTime    time.Time `db:"update_time"`     // 更新时间
	}
)

func newRaffleActivityModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRaffleActivityModel {
	return &defaultRaffleActivityModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`raffle_activity`",
	}
}

func (m *defaultRaffleActivityModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	bigMarketRaffleActivityActivityIdKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivityActivityIdPrefix, data.ActivityId)
	bigMarketRaffleActivityIdKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivityIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, bigMarketRaffleActivityActivityIdKey, bigMarketRaffleActivityIdKey)
	return err
}

func (m *defaultRaffleActivityModel) FindOne(ctx context.Context, id int64) (*RaffleActivity, error) {
	bigMarketRaffleActivityIdKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivityIdPrefix, id)
	var resp RaffleActivity
	err := m.QueryRowCtx(ctx, &resp, bigMarketRaffleActivityIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", raffleActivityRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRaffleActivityModel) FindOneByActivityId(ctx context.Context, activityId int64) (*RaffleActivity, error) {
	bigMarketRaffleActivityActivityIdKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivityActivityIdPrefix, activityId)
	var resp RaffleActivity
	err := m.QueryRowIndexCtx(ctx, &resp, bigMarketRaffleActivityActivityIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `activity_id` = ? limit 1", raffleActivityRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, activityId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRaffleActivityModel) Insert(ctx context.Context, data *RaffleActivity) (sql.Result, error) {
	bigMarketRaffleActivityActivityIdKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivityActivityIdPrefix, data.ActivityId)
	bigMarketRaffleActivityIdKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivityIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, raffleActivityRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ActivityId, data.ActivityName, data.ActivityDesc, data.BeginDateTime, data.EndDateTime, data.StrategyId, data.State)
	}, bigMarketRaffleActivityActivityIdKey, bigMarketRaffleActivityIdKey)
	return ret, err
}

func (m *defaultRaffleActivityModel) Update(ctx context.Context, newData *RaffleActivity) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	bigMarketRaffleActivityActivityIdKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivityActivityIdPrefix, data.ActivityId)
	bigMarketRaffleActivityIdKey := fmt.Sprintf("%s%v", cacheBigMarketRaffleActivityIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, raffleActivityRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ActivityId, newData.ActivityName, newData.ActivityDesc, newData.BeginDateTime, newData.EndDateTime, newData.StrategyId, newData.State, newData.Id)
	}, bigMarketRaffleActivityActivityIdKey, bigMarketRaffleActivityIdKey)
	return err
}

func (m *defaultRaffleActivityModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBigMarketRaffleActivityIdPrefix, primary)
}

func (m *defaultRaffleActivityModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", raffleActivityRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRaffleActivityModel) tableName() string {
	return m.table
}
